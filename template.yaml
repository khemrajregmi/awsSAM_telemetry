AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # API Gateway
  TelemetryWriteAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Telemetry API
          version: 1.0.0
        paths:
          /write/{siteId}:
            post:
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${TelemetryQueue.QueueName}"
                credentials: !GetAtt TelemetryAPIRole.Arn
                httpMethod: POST
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: |
                    Action=SendMessage&MessageBody={
                      "siteId": "$input.params('siteId')",
                      "body": $input.json('$')
                    }
                responses:
                  default:
                    statusCode: 200
              responses:
                '200':
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          message:
                            type: string
              parameters:
                - name: siteId
                  in: path
                  required: true
                  schema:
                    type: string

  # IAM Role for API Gateway to SQS
  TelemetryAPIRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSQSSendMessage
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt TelemetryQueue.Arn

  # SQS Queue for Telemetries
  TelemetryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TelemetryQueue
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TelemetryDLQ.Arn
        maxReceiveCount: 3

  # Dead Letter Queue (DLQ) for Telemetry Queue
  TelemetryDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: TelemetryDLQ

  # Lambda Function to Process SQS Messages and Store in DynamoDB
  TelemetryProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/write-telemetries.handler
      Runtime: nodejs20.x
      CodeUri: ./dist
      MemorySize: 128
      Timeout: 60
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref TelemetriesStore
        - SQSPollerPolicy:
            QueueName: !GetAtt TelemetryQueue.QueueName
      Environment:
        Variables:
          TABLE_NAME: !Ref TelemetriesStore
      Events:
        TelemetryQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TelemetryQueue.Arn
            BatchSize: 10

  # DynamoDB Table for Storing Telemetries
  TelemetriesStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: TelemetriesStore
      AttributeDefinitions:
        - AttributeName: siteId
          AttributeType: S
      KeySchema:
        - AttributeName: siteId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

Outputs:
  TelemetryWriteAPIUrl:
    Description: "Telemetry Write API Endpoint URL"
    Value: !Sub "https://${TelemetryWriteAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/write/{siteId}"

  TelemetryQueueUrl:
    Description: "Telemetry SQS Queue URL"
    Value: !Ref TelemetryQueue

  TelemetryDLQUrl:
    Description: "Telemetry Dead Letter Queue URL"
    Value: !Ref TelemetryDLQ

  TelemetryProcessorFunctionArn:
    Description: "Telemetry Processor Lambda Function ARN"
    Value: !GetAtt TelemetryProcessorFunction.Arn
